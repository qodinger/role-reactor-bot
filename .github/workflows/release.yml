name: Release

on:
  push:
    tags:
      - "v*.*.*" # v1.2.3
      - "v*.*.*-*" # v1.2.3-alpha, v1.2.3-beta.1
      - "[0-9]+.[0-9]+.*" # 0.2.0, 1.0.0

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Run tests
        run: |
          if pnpm test; then
            echo "✅ All tests passed"
          else
            echo "❌ Tests failed - stopping release process"
            exit 1
          fi
        env:
          CLIENT_ID: "123456789012345678"
          DISCORD_TOKEN: "test_token_for_release"
          MONGODB_URI: ""
          NODE_ENV: "test"

      - name: Validate package.json version
        run: |
          # Extract version from tag and package.json
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          TAG_VERSION_CLEAN=${TAG_VERSION#v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "Tag version: $TAG_VERSION_CLEAN"
          echo "Package.json version: $PACKAGE_VERSION"

          if [[ "$TAG_VERSION_CLEAN" != "$PACKAGE_VERSION" ]]; then
            echo "❌ Version mismatch: tag ($TAG_VERSION_CLEAN) != package.json ($PACKAGE_VERSION)"
            exit 1
          else
            echo "✅ Version match confirmed"
          fi

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION_CLEAN=${VERSION#v}

          echo "Extracting release notes for version: $VERSION_CLEAN"

          # Generate release notes from changelog
          CHANGELOG_PATH=""
          if [[ -f "docs/CHANGELOG.md" ]]; then
            CHANGELOG_PATH="docs/CHANGELOG.md"
            echo "Found changelog at: docs/CHANGELOG.md"
          elif [[ -f "CHANGELOG.md" ]]; then
            CHANGELOG_PATH="CHANGELOG.md"
            echo "Found changelog at: CHANGELOG.md"
          fi

          if [[ -n "$CHANGELOG_PATH" ]]; then
            # Try multiple version formats
            RELEASE_NOTES=$(awk -v version="$VERSION_CLEAN" -v vtag="$VERSION" '
            BEGIN { 
              in_section = 0
              found = 0
              content = ""
            }
            # Match version with or without brackets, with or without v prefix
            /^## \['"$VERSION_CLEAN"'\]/ || /^## \['"$VERSION"'\]/ || /^## '"$VERSION_CLEAN"' / || /^## '"$VERSION"' / {
              in_section = 1
              found = 1
              next
            }
            # Stop when we hit the next version section
            /^## / && in_section && found {
              in_section = 0
              exit
            }
            # Collect content in our section
            in_section {
              if (length(content) > 0) {
                content = content "\n" $0
              } else {
                content = $0
              }
            }
            END { 
              if (found && length(content) > 0) {
                print content
              } else {
                print "## Changes\n\nSee [CHANGELOG.md](https://github.com/tyecode-bots/role-reactor-bot/blob/main/docs/CHANGELOG.md) for detailed changes."
              }
            }
            ' "$CHANGELOG_PATH")
          else
            RELEASE_NOTES="## Changes\n\nSee [CHANGELOG.md](https://github.com/tyecode-bots/role-reactor-bot/blob/main/docs/CHANGELOG.md) for detailed changes."
          fi

          # Set the changelog link based on which path was found
          if [[ "$CHANGELOG_PATH" == "docs/CHANGELOG.md" ]]; then
            CHANGELOG_LINK="https://github.com/tyecode-bots/role-reactor-bot/blob/main/docs/CHANGELOG.md"
          else
            CHANGELOG_LINK="https://github.com/tyecode-bots/role-reactor-bot/blob/main/CHANGELOG.md"
          fi

          # Set environment variable for the release step
          echo "CHANGELOG_LINK=$CHANGELOG_LINK" >> $GITHUB_ENV

          # Set output with proper escaping
          {
            echo "release_notes<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed

            ${{ steps.release_notes.outputs.release_notes }}

            ---

            ## Key Features

            - Self-assignable roles through reactions
            - Temporary roles with auto-expiration
            - MongoDB integration with local file backup
            - Docker deployment support
            - Health monitoring and performance metrics

            ---

            **[View Full Changelog](${{ env.CHANGELOG_LINK }})**
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true

      - name: Release Summary
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "## 🚀 Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Update deployment environments" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Notify team of new release" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor for any issues" >> $GITHUB_STEP_SUMMARY

          echo "Release $VERSION created successfully! 🎉"
