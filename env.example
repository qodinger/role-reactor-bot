# =============================================================================
# Role Reactor Bot Configuration
# =============================================================================
# Copy this file to .env and fill in your values
# For VPS deployment: cp env.example .env && nano .env

# =============================================================================
# DISCORD CONFIGURATION (REQUIRED)
# =============================================================================

# Your Discord Bot Token [REQUIRED]
# Get this from https://discord.com/developers/applications
DISCORD_TOKEN=your_bot_token_here

# Your Discord Application Client ID [REQUIRED]
# Found in your Discord application's General Information page
CLIENT_ID=your_client_id_here

# Target Guild ID (Optional - for development)
# If set, commands will only be deployed to this guild (faster for development)
GUILD_ID=your_guild_id_here

# Developer IDs [OPTIONAL]
# Comma-separated list of Discord user IDs who can use developer commands
# Developer commands: /health, /performance, /storage
# Example: DEVELOPERS=123456789012345678,987654321098765432
# Get your user ID by enabling Developer Mode in Discord and right-clicking your name
DEVELOPERS=

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# MongoDB Connection URI [OPTIONAL]
# The bot uses a hybrid storage system: MongoDB + Local JSON files
# If MongoDB is unavailable, the bot continues with local storage
# 
# Examples:
# - Atlas (Recommended for VPS): mongodb+srv://username:password@cluster.mongodb.net/role-reactor-bot?retryWrites=true&w=majority
# - Local MongoDB: mongodb://localhost:27017
# - Docker: mongodb://mongodb:27017
# - Leave empty for local files only (no database)
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/role-reactor-bot?retryWrites=true&w=majority

# MongoDB Database Name [OPTIONAL]
# Default: role-reactor-bot
MONGODB_DB=role-reactor-bot

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# Local Data Directory [OPTIONAL]
# Directory for local JSON file storage (backup/fallback)
# Default: ./data
LOCAL_DATA_DIR=./data

# Sync Interval (minutes) [OPTIONAL]
# How often to sync local files with database
# Default: 5 minutes
SYNC_INTERVAL=5

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log Level [OPTIONAL]
# Options: ERROR, WARN, INFO, DEBUG, SUCCESS
# Default: INFO (use DEBUG for troubleshooting)
LOG_LEVEL=INFO

# Log File Path [OPTIONAL]
# If set, logs will be written to this file in addition to console
# Recommended for VPS: ./logs/bot.log
LOG_FILE=./logs/bot.log

# Enable Console Logging [OPTIONAL]
# Set to 'false' to disable console logging
# Default: true (keep true for VPS monitoring)
LOG_CONSOLE=true

# =============================================================================
# AI AVATAR GENERATION (OPTIONAL)
# =============================================================================

# OpenRouter API Key [OPTIONAL]
# Required for AI avatar generation feature
# Get your API key from https://openrouter.ai/
# This enables the /ai-avatar command for generating unique anime-style avatars
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Bot Website URL [OPTIONAL]
# Your bot's website URL for OpenRouter API identification
# Used for API usage tracking and support
BOT_WEBSITE_URL=https://github.com/your-repo/role-reactor-bot

# Bot Name [OPTIONAL]
# Your bot's name for OpenRouter API identification
# Used for API usage tracking and support
BOT_NAME=Role Reactor Bot

# =============================================================================
# KO-FI WEBHOOK INTEGRATION (OPTIONAL)
# =============================================================================

# Ko-fi Webhook Verification Token [OPTIONAL]
# Get this from your Ko-fi webhook settings
# Used to verify that webhook requests are from legitimate Ko-fi servers
# Example: KOFI_WEBHOOK_TOKEN=your_verification_token_here
KOFI_WEBHOOK_TOKEN=your_verification_token_here

# =============================================================================
# MONITORING & HEALTH CHECKS (OPTIONAL)
# =============================================================================

# Health Check Server Port [OPTIONAL]
# Port for the health check HTTP server
# Default: 3001 (will auto-increment if port is busy)
# HEALTH_PORT=3001



# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================
# 
# 1. Never commit your .env file to version control
# 2. Keep your bot token secret and secure
# 3. Use different tokens for development and production
# 4. Test your configuration with a development server first
# 5. Monitor your bot's logs for any issues
# 6. Set LOG_LEVEL to DEBUG for detailed debugging information
# 7. Use LOG_FILE for persistent logging in production
# 8. For VPS: Set NODE_ENV=production in your .env file
# 
# =============================================================================
# VPS DEPLOYMENT
# =============================================================================
# 
# For VPS deployment, recommended settings:
# - MONGODB_URI: Use MongoDB Atlas free tier (mongodb+srv://...)
# - NODE_ENV: production
# - LOG_LEVEL: INFO or WARN
# - LOG_FILE: ./logs/bot.log
# - DEVELOPERS: Set to your Discord user ID for developer commands
# 
# Cost-effective setup:
# - VPS: $5-10/month (DigitalOcean, Linode, Vultr)
# - MongoDB Atlas: Free tier (512MB) or $9/month
# - Total: $5-19/month depending on database choice
# 
# Quick VPS setup:
# 1. cp env.example .env
# 2. nano .env (fill in your values)
# 3. ./scripts/deploy.sh
# 
# =============================================================================
# HYBRID STORAGE SYSTEM
# =============================================================================
# 
# Your bot uses a hybrid storage system:
# - Primary: MongoDB (cloud or local)
# - Backup: Local JSON files in ./data directory
# - Fallback: Bot continues working even if database is down
# - Sync: Data automatically syncs between storage systems
# 
# Benefits:
# - No data loss if database is unavailable
# - Works offline with local files
# - Professional database features when available
# - Cost-effective with free MongoDB Atlas tier
# 
# =============================================================================
# PRODUCTION CHECKLIST
# =============================================================================
# 
# Before deploying to VPS, ensure you have:
# ✅ Discord Bot Token (from Discord Developer Portal)
# ✅ Discord Client ID (from Discord Developer Portal)
# ✅ MongoDB Atlas account (free tier recommended)
# ✅ VPS provider account (DigitalOcean, Linode, Vultr)
# ✅ Your Discord user ID (for DEVELOPERS)
# ✅ Discord server ID (for GUILD_ID, optional)
# 
# Required .env values for production:
# ✅ DISCORD_TOKEN=your_actual_bot_token
# ✅ CLIENT_ID=your_actual_client_id
# ✅ MONGODB_URI=your_mongodb_atlas_connection_string
# ✅ NODE_ENV=production
# ✅ LOG_FILE=./logs/bot.log
# ✅ DEVELOPERS=your_discord_user_id 